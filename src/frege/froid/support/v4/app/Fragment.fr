{-
    Copyright 2016-2017 Michael Chavinda
    This file is part of froid.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-}

module froid.support.v4.app.Fragment where

import froid.content.Context
import froid.content.Intent
import froid.content.res.Configuration
import froid.os.Bundle
import froid.view.ContextMenu
import froid.view.LayoutInflater
import froid.view.Menu
import froid.view.MenuInflater
import froid.view.MenuItem
import froid.view.View
import froid.view.ViewGroup
import froid.view.animation.Animation

import froid.Types

data NativeFragmentActivity = mutable native android.support.v4.app.FragmentActivity where
    native runOnUiThread :: NativeFragmentActivity -> MutableIO Runnable -> IO ()
    native startActivity :: NativeFragmentActivity -> Intent -> IO ()

data Delegator = Delegator { onActivityCreated      :: Maybe (Fragment -> Maybe Bundle -> IO ())
                           , onActivityResult       :: Maybe (Fragment -> Int -> Int -> Maybe Intent -> IO ())
                           , onAttach               :: Maybe (Fragment -> Context -> IO ())
                           , onAttachFragment       :: Maybe (Fragment -> Fragment -> IO ())
                           , onConfigurationChanged :: Maybe (Fragment -> Configuration -> IO ())
                           , onContextItemSelected  :: Maybe (Fragment -> MenuItem -> IO Bool)
                           , onCreate               :: Maybe (Fragment -> Maybe Bundle -> IO ())
                           , onCreateAnimation      :: Maybe (Fragment -> Int -> Bool -> Int -> IO Animation)
                           , onCreateContextMenu    :: Maybe (Fragment -> ContextMenu -> View -> ContextMenuInfo -> IO ()) --overload
                           , onCreateOptionsMenu    :: Maybe (Fragment -> Menu -> MenuInflater -> IO ())
                           , onCreateView           :: Maybe (Fragment -> LayoutInflater -> ViewGroup -> Maybe Bundle -> IO View)
                           , onResume               :: Maybe (Fragment -> IO ())
                           , onDestroy              :: Maybe (Fragment -> IO ())
                           , onDetach               :: Maybe (Fragment -> IO ())
                           }

data Fragment = mutable native android.support.v4.app.Fragment where
    defaultDelegator :: Fragment.Delegator
    defaultDelegator = Delegator { onActivityCreated      = Nothing
                                 , onActivityResult       = Nothing
                                 , onAttach               = Nothing
                                 , onAttachFragment       = Nothing
                                 , onConfigurationChanged = Nothing
                                 , onContextItemSelected  = Nothing
                                 , onCreate               = Nothing
                                 , onCreateAnimation      = Nothing
                                 , onCreateContextMenu    = Nothing
                                 , onCreateOptionsMenu    = Nothing
                                 , onCreateView           = Nothing
                                 , onResume               = Nothing
                                 , onDestroy              = Nothing
                                 , onDetach               = Nothing
                                 }
    native getActivity :: Fragment -> IO NativeFragmentActivity
    native getContext :: Fragment -> IO Context
    native getTag :: Fragment -> IO String
    native onResume :: Fragment -> IO ()
    native setArguments :: Fragment -> Bundle -> IO ()
    native getArguments :: Fragment -> IO (Maybe Bundle)
    native mk "froid.support.v4.app.Fragment.delegate" :: Fragment.Delegator -> IO Fragment
    native redelegateFragment "froid.support.v4.app.Fragment.redelegate" :: Fragment -> Fragment.Delegator -> IO Fragment

native module where {
    public static android.support.v4.app.Fragment delegate(TDelegator delegator) {
        FregeFragment frag = new FregeFragment();
        frag.setDelegator(delegator);
        return (android.support.v4.app.Fragment) frag;
    }

    public static android.support.v4.app.Fragment redelegate(android.support.v4.app.Fragment frag, TDelegator delegator) {
        FregeFragment fragment = (FregeFragment) frag;
        fragment.setDelegator(delegator);
        return (android.support.v4.app.Fragment) fragment;
    }

    public static class FregeFragment extends android.support.v4.app.Fragment {

        private static java.util.HashMap<Integer, TDelegator> delegatorMap = new java.util.HashMap<>();
        TDelegator delegator = null;

        public FregeFragment() {
            super();
            if (delegator == null) delegator = delegatorMap.get(this.getId());
        }

        public void setDelegator(TDelegator del) {
            this.delegator = del;
            delegatorMap.put(this.getId(), del);
        }

        @Override
        public void onCreate(android.os.Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            return;
        }

        @Override
        public android.view.View onCreateView(android.view.LayoutInflater inflater, android.view.ViewGroup container, android.os.Bundle savedInstanceState) {
            PreludeBase.TMaybe<android.os.Bundle> sis = savedInstanceState == null ?
             PreludeBase.TMaybe.DNothing.<android.os.Bundle>mk(): 
             PreludeBase.TMaybe.DJust.<android.os.Bundle>mk(Thunk.<android.os.Bundle>lazy(savedInstanceState));

            if (TDelegator.onCreateView(delegator).asJust() != null)
                return (android.view.View) PreludeBase.TST.performUnsafe(
                    TDelegator.onCreateView(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v4.app.Fragment) this)).call()
                    .apply(Thunk.lazy(inflater)).call()
                    .apply(Thunk.lazy(container)).call()
                    .apply(Thunk.lazy(sis)).call()).call();
            return null;
        }

        @Override
        public void onResume() {
            super.onResume();
            if (TDelegator.onResume(delegator).asJust() != null)
                PreludeBase.TST.performUnsafe(
                    TDelegator.onResume(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v4.app.Fragment) this))
                    .call()).call();
        }

        @Override
        public void onDestroy() {
            super.onDestroy();
            if (TDelegator.onDestroy(delegator).asJust() != null)
                PreludeBase.TST.performUnsafe(
                    TDelegator.onDestroy(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v4.app.Fragment) this))
                    .call()).call();
        }

        @Override
        public void onDetach() {
            super.onDetach();
            if (TDelegator.onDetach(delegator).asJust() != null)
                PreludeBase.TST.performUnsafe(
                    TDelegator.onDetach(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v4.app.Fragment) this))
                    .call()).call();
        }
    }
}
