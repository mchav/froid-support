{-
    Copyright 2016-2017 Michael Chavinda
    This file is part of froid.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
-}

module froid.support.v7.widget.recyclerView.Adapter where

import froid.view.ViewGroup
import froid.support.v7.widget.recyclerView.java.NativeViewHolder
import froid.support.v7.widget.recyclerView.ViewHolder

-- TODO: rename this to just adapter

data RecyclerViewAdapter = mutable native android.support.v7.widget.RecyclerView.Adapter where
    native notifyDataSetChanged :: RecyclerViewAdapter -> IO ()
    defaultDelegator = Adapter.Delegator { onCreateViewHolder = Nothing, onBindViewHolder = Nothing, getItemCount = Nothing }
    native mk "froid.support.v7.widget.recyclerView.Adapter.delegate" :: Adapter.Delegator -> IO RecyclerViewAdapter

data Delegator = Delegator { onCreateViewHolder :: Maybe (RecyclerViewAdapter -> ViewGroup -> Int -> IO RecyclerViewHolder)
                           , onBindViewHolder   :: Maybe (RecyclerViewAdapter -> RecyclerViewHolder -> Int -> IO ())
                           , getItemCount       :: Maybe (RecyclerViewAdapter -> IO Int)
                           }

native module where {
    public static android.support.v7.widget.RecyclerView.Adapter delegate(TDelegator delegator) {
        NativeAdapter adapter = new NativeAdapter();
        adapter.delegator = delegator;
        return (android.support.v7.widget.RecyclerView.Adapter) adapter;
    }
    public static class NativeAdapter extends android.support.v7.widget.RecyclerView.Adapter<NativeViewHolder> {
        TDelegator delegator = null;

        @Override
        public NativeViewHolder onCreateViewHolder(android.view.ViewGroup parent, int viewType) {
            if (TDelegator.onCreateViewHolder(delegator).asJust() != null)
                return (NativeViewHolder) PreludeBase.TST.performUnsafe(
                    TDelegator.onCreateViewHolder(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v7.widget.RecyclerView.Adapter) this)).call()
                    .apply(Thunk.lazy(parent)).call()
                    .apply(Thunk.<Integer>lazy(viewType)).call()).call();
            return null;
        }

        @Override
        public void onBindViewHolder(NativeViewHolder holder, int position) {
            if (TDelegator.onBindViewHolder(delegator).asJust() != null)
                PreludeBase.TST.performUnsafe(
                    TDelegator.onBindViewHolder(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v7.widget.RecyclerView.Adapter) this)).call()
                    .apply(Thunk.lazy(holder)).call()
                    .apply(Thunk.<Integer>lazy(position)).call()).call();
        }

        @Override
        public int getItemCount() {
            if (TDelegator.getItemCount(delegator).asJust() != null)
                return (int) PreludeBase.TST.performUnsafe(
                    TDelegator.getItemCount(delegator).asJust().mem1.call()
                    .apply(Thunk.lazy((android.support.v7.widget.RecyclerView.Adapter) this)).call()).call();
            return 0;
        }
    }
}